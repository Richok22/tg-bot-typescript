import {Command} from "./command.class";
import {Telegraf} from "telegraf";
import {IBotContext} from "../../context/context.interface";
import { MongoClient } from 'mongodb';

export class StatsCommand extends Command{
    private dbClient: MongoClient;
    constructor(bot: Telegraf<IBotContext>, dbClient: MongoClient) {
        super(bot);
        this.dbClient = dbClient;
    }
    async handle(): Promise<void> {
        this.bot.command("stats",async (ctx) => {
            // Delete the command message
            await ctx.deleteMessage();

            const collection = this.dbClient.db('test').collection('datas');
            const data = await collection.find({}).toArray();
            const count = await collection.countDocuments();
            const count18true = await collection.countDocuments({ is18Checked: true });
            const count18false = await collection.countDocuments({ is18Checked: false });
            const privacy = await collection.countDocuments({ privacyChecked: false });
            ctx.reply(`üéâ*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π*üéâ\n\nüöÄ –ë—ã–ª–æ –ø–æ–ª—É—á–µ–Ω–æ –æ—Ç–≤–µ—Ç–æ–≤: *${count}*\n\n‚úÖ –ò–∑ –∫–æ—Ç–æ—Ä—ã—Ö –±—ã–ª–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö: *${count18true}*\n\n‚ùå –ù–æ –±—ã–ª–∏ –∏ –æ—Ç–∫–∞–∑—ã: *${count18false}*\n\nüöó–ù—É–∂–µ–Ω –±—É–¥–µ—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç: *${privacy}*`, { parse_mode: 'Markdown' })
        });


    }
}

